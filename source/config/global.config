###------------------------------------------------------------------------------------------------
# script:  global.config
# purpose: Global Configuration file
# version: 1.0.0
###------------------------------------------------------------------------------------------------

###------------------------------------------------------------------------------------------------
## Define Path
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin

###------------------------------------------------------------------------------------------------
## Directories
declare -r DIRECTORY_BASE="${DIRECTORY_CID:-/opt/cid}"
declare -r DIRECTORY_TEMPORARY="/tmp/cid"

###------------------------------------------------------------------------------------------------
## Important Files
declare -r REFERENCE_EXIT_CODES="${DIRECTORY_BASE}/lib/reference/exit_codes.inc"
declare -r REFERENCE_DEFINITIONS="${DIRECTORY_BASE}/lib/reference/definitions.inc"

###------------------------------------------------------------------------------------------------
## Logging
ENABLE_COLOR="${CID_ENABLE_COLOR:-yes}"
if [[ ! -z "${ENABLE_TIMESTAMP_OVERRIDE}" ]]; then
    ENABLE_TIMESTAMP="${ENABLE_TIMESTAMP_OVERRIDE}"
fi

###------------------------------------------------------------------------------------------------
## Dependencies
declare -a REQUIRED_EXECUTABLES=('mkdir' 'mktemp' 'cp' 'rm' 'ps')
declare -a REQUIRED_SOURCE_FILES=()
if [[ -z "${ARGUMENTS_DESCRIPTION}" ]]; then
    declare -a ARGUMENTS_DESCRIPTION=()
fi

###------------------------------------------------------------------------------------------------
## Temp Related
declare -a TEMPORARY_FILES=()
declare -a TEMPORARY_DIRECTORIES=()
# Processing Working File - if script is abnormally terminated and a filename is currently set for
# PROCESSING_WORKING_FILE, the file will be wiped and removed. This is useful when generating files
# using external binaries (tar, gzip, etc)
PROCESSING_WORKING_FILE=""

###------------------------------------------------------------------------------------------------
## Misconfiguration Protection
# Check that the script identity has been defined
if [[ -z "${SELF_IDENTITY}" ]]; then
    echo "ERROR: script does not contain an identity string, please define SELF_IDENTITY in the base script"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi

# Ensure working directory exists
if [ ! -d ${WORKING_DIRECTORY} ]; then
    rm -f ${WORKING_DIRECTORY} 2>/dev/null
    $(which mkdir) -p ${WORKING_DIRECTORY} 2>/dev/null
    if [ ${?} -ne 0 ]; then
        echo "ERROR: Could not create Working directory (${WORKING_DIRECTORY}), aborting operation"
        exit 3 # E_SCRIPT_MISCONFIGURED
    fi
fi

# Ensure Temporary directory exists
if [ ! -d ${DIRECTORY_TEMPORARY} ]; then
    echo "WARNING: Temporary directory does not exist (${DIRECTORY_TEMPORARY}), attempting to create"
    rm -f ${DIRECTORY_TEMPORARY}
    $(which mkdir) -p ${DIRECTORY_TEMPORARY} 2> /dev/null
    if [ ${?} -ne 0 ]; then
        echo "ERROR: Could not create Temporary directory directory (${DIRECTORY_TEMPORARY}), aborting operation"
        exit 3 # E_SCRIPT_MISCONFIGURED
    fi
fi

###------------------------------------------------------------------------------------------------
## Includes
# Reference: Exit Codes
if [ ! -f "${REFERENCE_EXIT_CODES}" ]; then
    echo "Reference exit codes file not found (${REFERENCE_EXIT_CODES}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${REFERENCE_EXIT_CODES}"

# Reference: Library Definitions
if [ ! -f "${REFERENCE_DEFINITIONS}" ]; then
    echo "Reference definitions file not found (${REFERENCE_DEFINITIONS}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${REFERENCE_DEFINITIONS}"

# Lib Functions: Common
if [ ! -f "${LIB_FUNCTIONS_CORE_COMMON}" ]; then
    echo "Common functions file not found (${LIB_FUNCTIONS_CORE_COMMON}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${LIB_FUNCTIONS_CORE_COMMON}"

# Lib Functions: Logging
if [ ! -f "${LIB_FUNCTIONS_CORE_LOGGING}" ]; then
    echo "Logging functions file not found (${LIB_FUNCTIONS_CORE_LOGGING}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${LIB_FUNCTIONS_CORE_LOGGING}"

# Lib Functions: Color Related
if [ ! -f "${LIB_FUNCTIONS_CORE_COLOR}" ]; then
    echo "Colors function file not found (${LIB_FUNCTIONS_CORE_COLOR}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${LIB_FUNCTIONS_CORE_COLOR}"

# Lib Functions: Script Logic
if [ ! -f "${LIB_FUNCTIONS_CORE_SCRIPT_LOGIC}" ]; then
    echo "Script logic functions file not found (${LIB_FUNCTIONS_CORE_SCRIPT_LOGIC}), aborting"
    exit 3 # E_SCRIPT_MISCONFIGURED
fi
source "${LIB_FUNCTIONS_CORE_SCRIPT_LOGIC}"

###------------------------------------------------------------------------------------------------
## Self Initialization
SELF_EXEC="$($(which basename) ${0}) ${*}"
RUNCODE="$(date +%s%6N)"
GRACEFUL_EXIT=no
